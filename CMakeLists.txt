
project(datumsponza)

cmake_minimum_required(VERSION 2.8.12)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Build Type: Debug Release RelWithDebInfo MinSizeRel" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g" CACHE STRING "" FORCE)

set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE INTERNAL "")
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE INTERNAL "")

set(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR} CACHE INTERNAL "")

find_package(Threads REQUIRED)

#
# leap
#

find_path(LEAP_INCLUDE leap.h PATHS ${PROJECT_SOURCE_DIR}/../leap/include NO_DEFAULT_PATH)

find_library(LEAP_LIBRARIES NAMES leap PATHS ${PROJECT_SOURCE_DIR}/../leap/lib)

if(LEAP_INCLUDE AND LEAP_LIBRARIES)
  add_library(leap STATIC IMPORTED)
  set_property(TARGET leap PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LEAP_INCLUDE})
  set_property(TARGET leap PROPERTY IMPORTED_LOCATION ${LEAP_LIBRARIES})
  set_property(TARGET leap PROPERTY INTERFACE_LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})

  if(WIN32)
    set_property(TARGET leap APPEND PROPERTY INTERFACE_LINK_LIBRARIES WS2_32)
  endif(WIN32)

  message(STATUS "Found Leap: ${LEAP_INCLUDE}")
else(LEAP_INCLUDE AND LEAP_LIBRARIES)
  message(FATAL_ERROR "Could not find Leap Library")
endif(LEAP_INCLUDE AND LEAP_LIBRARIES)

#
# datum
#

find_path(DATUM_INCLUDE datum.h PATHS ${PROJECT_SOURCE_DIR}/../datum/include NO_DEFAULT_PATH)
find_path(DATUM_TOOLS assetpacker.h PATHS ${PROJECT_SOURCE_DIR}/../datum/tools NO_DEFAULT_PATH)

find_library(DATUM_LIBRARIES NAMES datum PATHS ${PROJECT_SOURCE_DIR}/../datum/lib)

if(DATUM_INCLUDE AND DATUM_LIBRARIES)
  add_library(datum STATIC IMPORTED)
  set_property(TARGET datum PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${DATUM_INCLUDE})
  set_property(TARGET datum PROPERTY IMPORTED_LOCATION ${DATUM_LIBRARIES})
  set_property(TARGET datum PROPERTY INTERFACE_LINK_LIBRARIES leap)

  message(STATUS "Found Datum: ${DATUM_INCLUDE}")
else(DATUM_INCLUDE AND DATUM_LIBRARIES)
  message(FATAL_ERROR "Could not find Datum Library")
endif(DATUM_INCLUDE AND DATUM_LIBRARIES)

#
# vulkan
#

if(WIN32)
  find_path(VULKAN_INCLUDE vulkan/vulkan.h PATH_SUFFIXES ../include)
  find_library(VULKAN_LIBRARIES NAMES vulkan-1 vulkan)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WIN32_KHR")
endif(WIN32)

if(UNIX)
  find_path(VULKAN_INCLUDE vulkan/vulkan.h)
  find_library(VULKAN_LIBRARIES NAMES libvulkan.so)
  find_path(XCB_INCLUDE_DIRS xcb/xcb.h PATH_SUFFIXES xcb)
  find_library(XCB_LIBRARIES xcb)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_XCB_KHR")
endif(UNIX)

add_library(vulkan STATIC IMPORTED)
set_property(TARGET vulkan PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${VULKAN_INCLUDE})
set_property(TARGET vulkan PROPERTY IMPORTED_LOCATION ${VULKAN_LIBRARIES})

message(STATUS ${VULKAN_INCLUDE})
message(STATUS ${VULKAN_LIBRARIES})

#
# datum-sponza
#

add_subdirectory(src)
